#ifndef LHL_REGEX_H
#define LHL_REGEX_H

#include "LML/stdafx.h"
#include <vector>

namespace LML::Lexical
{
	/**
	 * The class NFA is the ADT of nondeterministic finite automaton.
	 * LML will transform a regex to a NFA first using McMaughton-Yamada-Thompson algorithm.
	 * NFA class uses a two-dimension int array to store the transition table and uses a linked list to store the movements.
	 * It can be used to match a string but that would not be used in the code generated by LML.
	 */
	class NFA
	{
	public:
		/**
		 * Construct a new NFA with explicit count of status
		 * @param size The count of status
		 */
		NFA( int size );

		/**
		 * Deconstruct
		 */
		~NFA();

		/**
		 * Get the head index of the linked list, which stores all the status that status `s` can move to with char `c`.
		 * @param s The beginning status number
		 * @param c The char used to transfer
		 * @return The head index of the linked list
		 */
		int GetTransitionHeadIndex( int s, char c );

		/**
		 * Get the next index in the linked list
		 * @param index The previous index
		 * @return The next index
		 */
		int NextIndex( int index );

		/**
		 * Get the number of the status stored in the explicit index of the linked list.
		 * @param index The index of the linked list
		 * @return The number of the status
		 */
		int GetMovement( int index );

		/**
		 * Get the count of status
		 * @return Status count
		 */
		int GetSize();

		/**
		 * Try to match the str with the pattern of this NFA
		 * @param str The string to match
		 * @return Whether str is matched or not
		 */
		bool Match(const std::string str);

	private:
		std::vector<int> mov, nxt;
		int **tran;
		int size;
	};
}

#endif //LHL_REGEX_H
