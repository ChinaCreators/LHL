#ifndef LHL_REGEX_H
#define LHL_REGEX_H

#include "LML/stdafx.h"
#include <vector>

namespace LML::Lexical
{
	/**
	 * The class NFA is the ADT of nondeterministic finite automaton.
	 * LML will transform a regex to a NFA first using McMaughton-Yamada-Thompson algorithm.
	 * NFA class uses a two-dimension int array to store the transition table and uses a linked list to store the movements.
	 * It can be used to match a string but that would not be used in the code generated by LML.
	 */
	class NFA
	{
	public:
		/**
		 * Construct a new NFA with explicit count of status
		 * @param size The count of status
		 */
		NFA( int size );

		/**
		 * Deconstruct
		 */
		~NFA();

		/**
		 * Try to match the str with the pattern of this NFA
		 * @param str The string to match
		 * @return Whether str is matched or not
		 */
		bool Match( const std::string str );

	private:
		int *trans, *head, *nxt;
		int size;
	};

	/**
	 * The class used to build NFA
	 */
	class NFABuilder
	{
	public:
		/**
		 * Construct a new NFABuilder
		 */
		NFABuilder();

		/**
		 * The Deconstruct
		 */
		~NFABuilder();

		/**
		 * Add a transition path
		 * @param from transition starting point
		 * @param c the char accepted. Use 0 as Epsilon
		 * @param to transition ending point
		 */
		void AddTransition( int from, char c, int to );

		/**
		 * Add a new State
		 * @return the id of the new state
		 */
		int NewState();

		/**
		 * Get the number of the states
		 * @return number of the states
		 */
		int GetSize();

	private:
		std::vector<int *> trans;
		std::vector<int> dest, nxt;
		int size, current;
	};
}

#endif //LHL_REGEX_H
